@model EduHubLiving.Models.PropertyListingDto

@{
    ViewBag.Title = "Add New Listing";

    var statusOptions = new List<SelectListItem>
    {
    new SelectListItem { Value = "Active", Text = "Active" },
    new SelectListItem { Value = "Pending", Text = "Pending" },
    new SelectListItem { Value = "Sold", Text = "Sold" }
    };

    var typeOptions = new List<SelectListItem>
        {
        new SelectListItem { Value = "House", Text = "House" },
        new SelectListItem { Value = "Apartment", Text = "Apartment" },
        new SelectListItem { Value = "Condo", Text = "Condo" }
        };

        string[] features = { "Heat", "Hydro", "Wifi", "Parking Lot", "Furnished", "Etc" };
        }

        @using (Html.BeginForm("CreatePropertyListing", "PropertyListing", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        @Html.AntiForgeryToken()

        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <div><h5>@ViewBag.Title</h5></div>
                    <div>@Html.ActionLink("Back to List", "Index")</div>
                </div>
            </div>
            <div class="card-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group row">
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">No of Bed Rooms</label>
                            @Html.EditorFor(model => model.NoBedRooms, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NoBedRooms, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">No of Bath Rooms</label>
                            @Html.EditorFor(model => model.NoBathRooms, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NoBathRooms, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Square Footage</label>
                            @Html.EditorFor(model => model.SquareFootage, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                            @Html.ValidationMessageFor(model => model.SquareFootage, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-12">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "3", cols = "30" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.Status, statusOptions, "Select Status", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.Type, typeOptions, "Select Type", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Features</label>
                            <div></div>
                            @foreach (var option in features)
                            {
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" name="Features[]" value="@option" @(Model.Features !=null && Model.Features.Contains(option) ? "checked" : "" ) />
                                <label class="form-check-label">@option</label>
                            </div>
                            }
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Lease Term</label>
                            @Html.EditorFor(model => model.LeaseTerm, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LeaseTerm, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Landlord/LandLady Phone Number</label>
                            @Html.EditorFor(model => model.LandLordPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LandLordPhoneNumber, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Landlord/LandLady Email</label>
                            @Html.EditorFor(model => model.LandlordEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LandlordEmail, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-6">
                            <label class="col-form-label">Available Date</label>
                            @Html.EditorFor(model => model.AvailabilityDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.AvailabilityDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row mt-2">
                        <div class="col-sm-6">
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="customFile" name="media" multiple accept=".jpg,.jpeg,.png">
                                <label class="custom-file-label" for="customFile">Choose file</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-10 offset-sm-2 d-flex justify-content-end">
                            <input type="submit" value="Add New Listing" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }

        @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        }

        <style>
            input {
                max-width: 100%;
            }

            select {
                max-width: 100%;
            }

            textarea {
                max-width: 100%;
            }
        </style>
